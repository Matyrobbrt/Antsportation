import com.matyrobbrt.gradle.pngoptimiser.task.OptimisePNGTask

buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'groovy'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matyrobbrt.pngoptimiser' version '0.2.0'
}

// Patchouli has mixins...
apply plugin: 'org.spongepowered.mixin'

group = 'com.matyrobbrt.antsportation' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "antsportation-$mc_version"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    data
    def ext = create('extension')

    data {
        groovy {
            compileClasspath += ext.output
        }
    }
}

configurations {
    dataImplementation.extendsFrom minecraft

    groovyDeps
    dataImplementation.extendsFrom groovyDeps
    extensionImplementation.extendsFrom dataImplementation
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.07.10-1.18.2'

    accessTransformers.from file('src/data/resources/accesstransformer.cfg')
    accessTransformers.from file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        all {
            mods {
                antsportation {
                    source sourceSets.main as SourceSet
                }
            }
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'simplegui'
        }

        client {}
        server {}
        gameTestServer {}

        data {
            args '--mod', 'antsportation', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                antsportation {
                    source sourceSets.data as SourceSet
                }
            }
            lazyToken('minecraft_classpath') {
                configurations.groovyDeps.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven { url 'https://modmaven.dev/' }
    maven { url 'https://dl.cloudsmith.io/public/matyrobbrt/matylib/maven/' }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://maven.k-4u.nl' }
}

dependencies {
    groovyDeps("org.apache.groovy:groovy-all:$groovy_version") {
        exclude module: 'groovy-cli-picocli'
        exclude module: 'groovy-groovysh'
    }
    groovyDeps("org.apache.groovy:groovy-contracts:$groovy_version")

    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compileOnly fg.deobf("mezz.jei:jei-1.18.2:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:${jei_version}")

    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")

    def patchouli = fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}") {
        transitive = false
    }
    implementation patchouli
    dataImplementation patchouli

    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }

    // ONLY used for patchouli datagen
    dataImplementation fg.deobf('com.matyrobbrt:matylib-1.18.2:2.1.1')
    dataImplementation sourceSets.main.output
}

tasks.register('optimiseAssets', OptimisePNGTask) {
    file(fileTree(dir: sourceSets.main.resources.srcDirs[0], includes: ['**/*.png']))
    option 'i', 0
    option 'strip', 'safe'
    backupOldFiles()
}

static void configureJarTask(Jar jar) {
    jar.configure {
        jar.manifest.attributes([
                "Specification-Title"     : "Antsportation",
                "Specification-Vendor"    : "Matyrobbrt, Learwin, Itskillerluc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : 'Matyrobbrt, Learwin, Itskillerluc',
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

final var props = [
        'forge_ver'    : forge_version,
        'patchouli_ver': patchouli_version,
        'jei_ver'      : jei_version,
        'top_ver'      : top_version
]

processResources {
    inputs.properties props
    from('META-INF/mods.toml') {
        expand props
    }
}

jar {
    configureJarTask(jar)
}
tasks.jar.finalizedBy('reobfJar')

tasks.create('extensionNoPropsJar', org.gradle.jvm.tasks.Jar) {
    it.from(sourceSets.extension.output)
    it.group 'build'
    classifier 'extension-no-props'
    exclude 'META-INF/services/org.codehaus.groovy.runtime.ExtensionModule'
    manifest.attributes([
            'FMLModType': 'GAMELIBRARY'
    ])
}
dependencies.dataRuntimeOnly files(tasks.extensionNoPropsJar.archiveFile.get().asFile)

tasks.create('extensionJar', org.gradle.jvm.tasks.Jar) {
    it.from(sourceSets.extension.output)
    it.group 'build'
    classifier 'extension'
    finalizedBy(extensionNoPropsJar)
}

compileDataGroovy {
    dependsOn(extensionJar)
    configure(groovyOptions) {
        configurationScript = file('groovy-compiler.groovy')
    }
}